import * as fs from "fs";
import * as path from "path";
import {
  BRAND_COLORS,
  type ColorIntent,
  type OpacityValue,
} from "@/types/colors";

// Base variants from ColorIntent type
const baseVariants: ColorIntent[] = [
  "bg",
  "text",
  "border",
  "ring",
  "fill",
  "stroke",
];

// Gradient variants
const gradientVariants = ["from", "via", "to"];

// Opacity values from OpacityValue type
const opacities: OpacityValue[] = [5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95];

// States
const states = ["hover", "focus", "active", "disabled"];
const groupStates = ["group-hover", "group-focus", "group-active"];

// Theme colors using BRAND_COLORS
const themeColors = Object.fromEntries(
  Object.keys(BRAND_COLORS).map((color) => [
    color,
    { gradient: ["400", "500", "600"], base: "500" },
  ]),
);

export const generateSafelist = () => {
  const safelist: Set<string> = new Set();

  // Helper to add class with all its variants
  const addClassWithVariants = (baseClass: string) => {
    safelist.add(baseClass);

    // Add state variants
    states.forEach((state) => {
      safelist.add(`${state}:${baseClass}`);
    });

    // Add group state variants
    groupStates.forEach((state) => {
      safelist.add(`${state}:${baseClass}`);
    });
  };

  // Generate classes for each color
  Object.entries(themeColors).forEach(([color, config]) => {
    // Base color variants
    baseVariants.forEach((variant) => {
      // Basic class
      const baseClass = `${variant}-${color}-${config.base}`;
      addClassWithVariants(baseClass);

      // With opacity variants
      opacities.forEach((opacity) => {
        const opacityClass = `${baseClass}/${opacity}`;
        addClassWithVariants(opacityClass);
      });
    });

    // Gradient variants
    gradientVariants.forEach((variant) => {
      config.gradient.forEach((shade) => {
        const gradientClass = `${variant}-${color}-${shade}`;
        addClassWithVariants(gradientClass);
      });
    });

    // Special patterns for dynamic classes
    [
      `from-${color}-gradient-start`,
      `to-${color}-gradient-end`,
      `bg-${color}-hover`,
      `text-${color}-content`,
      `border-${color}-content-hover`,
    ].forEach((specialClass) => {
      addClassWithVariants(specialClass);
    });
  });

  // Write to safelist.txt
  const safelistContent = Array.from(safelist).sort().join("\n");
  const safelistPath = path.resolve(process.cwd(), "safelist.txt");

  fs.writeFileSync(safelistPath, safelistContent, "utf8");

  return Array.from(safelist);
};

// Add comment at the top of safelist.txt explaining its purpose
const addSafelistHeader = () => {
  const header = `/* 
 * This file is auto-generated by tailwind-safelist.ts
 * It contains all the dynamic classes needed for the application
 * DO NOT EDIT THIS FILE DIRECTLY
 */\n\n`;

  const safelistPath = path.resolve(process.cwd(), "safelist.txt");
  const content = fs.readFileSync(safelistPath, "utf8");
  fs.writeFileSync(safelistPath, header + content, "utf8");
};

// Execute
generateSafelist();
addSafelistHeader();
